name: Application Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/**'
      - 'jobs/**'
      - '.github/workflows/application.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'jobs/**'
      - '.github/workflows/application.yml'

env:
  AWS_REGION: 'us-west-2'
  ECR_REPOSITORY: 'nomad-hello-world'

jobs:
  build-and-push:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/hello-world

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update Nomad Job
      if: github.ref == 'refs/heads/main'
      run: |
        # Update the Nomad job with the new image tag
        sed -i "s|image = \".*\"|image = \"${{ steps.build-image.outputs.image }}\"|g" ../../jobs/hello-world.nomad

  test-application:
    name: 'Test Application'
    runs-on: ubuntu-latest
    needs: build-and-push
    defaults:
      run:
        working-directory: ./apps/hello-world

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

    - name: Run security audit
      run: npm audit --audit-level moderate

  deploy-to-nomad:
    name: 'Deploy to Nomad'
    runs-on: ubuntu-latest
    needs: [build-and-push, test-application]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install Nomad CLI
      run: |
        wget https://releases.hashicorp.com/nomad/1.6.2/nomad_1.6.2_linux_amd64.zip
        unzip nomad_1.6.2_linux_amd64.zip
        sudo mv nomad /usr/local/bin/

    - name: Get Nomad UI URL
      id: get-nomad-url
      run: |
        cd terraform
        terraform init
        NOMAD_URL=$(terraform output -raw nomad_ui_url)
        echo "nomad_url=$NOMAD_URL" >> $GITHUB_OUTPUT

    - name: Deploy to Nomad
      run: |
        # Get the Nomad server IP from Terraform
        cd terraform
        NOMAD_SERVER_IP=$(terraform output -json nomad_servers | jq -r '.[0]')
        
        # Set Nomad address
        export NOMAD_ADDR="http://$NOMAD_SERVER_IP:4646"
        
        # Deploy the job
        nomad job run jobs/hello-world.nomad
        
        # Wait for deployment
        sleep 30
        
        # Check job status
        nomad job status hello-world

    - name: Verify Deployment
      run: |
        # Get the Nomad server IP from Terraform
        cd terraform
        NOMAD_SERVER_IP=$(terraform output -json nomad_servers | jq -r '.[0]')
        
        # Set Nomad address
        export NOMAD_ADDR="http://$NOMAD_SERVER_IP:4646"
        
        # Check if job is running
        JOB_STATUS=$(nomad job status hello-world | grep -c "running" || true)
        if [ "$JOB_STATUS" -gt 0 ]; then
          echo "✅ Application deployed successfully!"
        else
          echo "❌ Application deployment failed!"
          exit 1
        fi

    - name: Output Deployment Info
      run: |
        echo "## Application Deployment Complete 🚀" >> $GITHUB_STEP_SUMMARY
        echo "### Nomad UI" >> $GITHUB_STEP_SUMMARY
        echo "- URL: ${{ steps.get-nomad-url.outputs.nomad_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- Job: hello-world" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Access the Nomad UI to monitor the application" >> $GITHUB_STEP_SUMMARY
        echo "2. Check the application logs in CloudWatch" >> $GITHUB_STEP_SUMMARY
        echo "3. Monitor application metrics" >> $GITHUB_STEP_SUMMARY
